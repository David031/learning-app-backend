// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  dynasty: (where?: DynastyWhereInput) => Promise<boolean>;
  idiom: (where?: IdiomWhereInput) => Promise<boolean>;
  level: (where?: LevelWhereInput) => Promise<boolean>;
  record: (where?: RecordWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  dynasty: (where: DynastyWhereUniqueInput) => DynastyNullablePromise;
  dynasties: (args?: {
    where?: DynastyWhereInput;
    orderBy?: DynastyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Dynasty>;
  dynastiesConnection: (args?: {
    where?: DynastyWhereInput;
    orderBy?: DynastyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DynastyConnectionPromise;
  idiom: (where: IdiomWhereUniqueInput) => IdiomNullablePromise;
  idioms: (args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Idiom>;
  idiomsConnection: (args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IdiomConnectionPromise;
  level: (where: LevelWhereUniqueInput) => LevelNullablePromise;
  levels: (args?: {
    where?: LevelWhereInput;
    orderBy?: LevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Level>;
  levelsConnection: (args?: {
    where?: LevelWhereInput;
    orderBy?: LevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LevelConnectionPromise;
  record: (where: RecordWhereUniqueInput) => RecordNullablePromise;
  records: (args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Record>;
  recordsConnection: (args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecordConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDynasty: (data: DynastyCreateInput) => DynastyPromise;
  updateDynasty: (args: {
    data: DynastyUpdateInput;
    where: DynastyWhereUniqueInput;
  }) => DynastyPromise;
  updateManyDynasties: (args: {
    data: DynastyUpdateManyMutationInput;
    where?: DynastyWhereInput;
  }) => BatchPayloadPromise;
  upsertDynasty: (args: {
    where: DynastyWhereUniqueInput;
    create: DynastyCreateInput;
    update: DynastyUpdateInput;
  }) => DynastyPromise;
  deleteDynasty: (where: DynastyWhereUniqueInput) => DynastyPromise;
  deleteManyDynasties: (where?: DynastyWhereInput) => BatchPayloadPromise;
  createIdiom: (data: IdiomCreateInput) => IdiomPromise;
  updateIdiom: (args: {
    data: IdiomUpdateInput;
    where: IdiomWhereUniqueInput;
  }) => IdiomPromise;
  updateManyIdioms: (args: {
    data: IdiomUpdateManyMutationInput;
    where?: IdiomWhereInput;
  }) => BatchPayloadPromise;
  upsertIdiom: (args: {
    where: IdiomWhereUniqueInput;
    create: IdiomCreateInput;
    update: IdiomUpdateInput;
  }) => IdiomPromise;
  deleteIdiom: (where: IdiomWhereUniqueInput) => IdiomPromise;
  deleteManyIdioms: (where?: IdiomWhereInput) => BatchPayloadPromise;
  createLevel: (data: LevelCreateInput) => LevelPromise;
  updateLevel: (args: {
    data: LevelUpdateInput;
    where: LevelWhereUniqueInput;
  }) => LevelPromise;
  updateManyLevels: (args: {
    data: LevelUpdateManyMutationInput;
    where?: LevelWhereInput;
  }) => BatchPayloadPromise;
  upsertLevel: (args: {
    where: LevelWhereUniqueInput;
    create: LevelCreateInput;
    update: LevelUpdateInput;
  }) => LevelPromise;
  deleteLevel: (where: LevelWhereUniqueInput) => LevelPromise;
  deleteManyLevels: (where?: LevelWhereInput) => BatchPayloadPromise;
  createRecord: (data: RecordCreateInput) => RecordPromise;
  updateRecord: (args: {
    data: RecordUpdateInput;
    where: RecordWhereUniqueInput;
  }) => RecordPromise;
  updateManyRecords: (args: {
    data: RecordUpdateManyMutationInput;
    where?: RecordWhereInput;
  }) => BatchPayloadPromise;
  upsertRecord: (args: {
    where: RecordWhereUniqueInput;
    create: RecordCreateInput;
    update: RecordUpdateInput;
  }) => RecordPromise;
  deleteRecord: (where: RecordWhereUniqueInput) => RecordPromise;
  deleteManyRecords: (where?: RecordWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  dynasty: (
    where?: DynastySubscriptionWhereInput
  ) => DynastySubscriptionPayloadSubscription;
  idiom: (
    where?: IdiomSubscriptionWhereInput
  ) => IdiomSubscriptionPayloadSubscription;
  level: (
    where?: LevelSubscriptionWhereInput
  ) => LevelSubscriptionPayloadSubscription;
  record: (
    where?: RecordSubscriptionWhereInput
  ) => RecordSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type IdiomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "idiom_ASC"
  | "idiom_DESC"
  | "description_ASC"
  | "description_DESC";

export type DynastyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "dynastyName_ASC"
  | "dynastyName_DESC";

export type RecordStatus =
  | "Finish_All"
  | "Finish_Three"
  | "Finish_Two"
  | "Not_Finish";

export type RecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC";

export type LevelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DynastyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface IdiomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  idiom?: Maybe<String>;
  idiom_not?: Maybe<String>;
  idiom_in?: Maybe<String[] | String>;
  idiom_not_in?: Maybe<String[] | String>;
  idiom_lt?: Maybe<String>;
  idiom_lte?: Maybe<String>;
  idiom_gt?: Maybe<String>;
  idiom_gte?: Maybe<String>;
  idiom_contains?: Maybe<String>;
  idiom_not_contains?: Maybe<String>;
  idiom_starts_with?: Maybe<String>;
  idiom_not_starts_with?: Maybe<String>;
  idiom_ends_with?: Maybe<String>;
  idiom_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  dynasty?: Maybe<DynastyWhereInput>;
  AND?: Maybe<IdiomWhereInput[] | IdiomWhereInput>;
  OR?: Maybe<IdiomWhereInput[] | IdiomWhereInput>;
  NOT?: Maybe<IdiomWhereInput[] | IdiomWhereInput>;
}

export interface DynastyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  dynastyName?: Maybe<String>;
  dynastyName_not?: Maybe<String>;
  dynastyName_in?: Maybe<String[] | String>;
  dynastyName_not_in?: Maybe<String[] | String>;
  dynastyName_lt?: Maybe<String>;
  dynastyName_lte?: Maybe<String>;
  dynastyName_gt?: Maybe<String>;
  dynastyName_gte?: Maybe<String>;
  dynastyName_contains?: Maybe<String>;
  dynastyName_not_contains?: Maybe<String>;
  dynastyName_starts_with?: Maybe<String>;
  dynastyName_not_starts_with?: Maybe<String>;
  dynastyName_ends_with?: Maybe<String>;
  dynastyName_not_ends_with?: Maybe<String>;
  idioms_every?: Maybe<IdiomWhereInput>;
  idioms_some?: Maybe<IdiomWhereInput>;
  idioms_none?: Maybe<IdiomWhereInput>;
  AND?: Maybe<DynastyWhereInput[] | DynastyWhereInput>;
  OR?: Maybe<DynastyWhereInput[] | DynastyWhereInput>;
  NOT?: Maybe<DynastyWhereInput[] | DynastyWhereInput>;
}

export type IdiomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LevelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<Int>;
}>;

export interface RecordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  level?: Maybe<LevelWhereInput>;
  status?: Maybe<RecordStatus>;
  status_not?: Maybe<RecordStatus>;
  status_in?: Maybe<RecordStatus[] | RecordStatus>;
  status_not_in?: Maybe<RecordStatus[] | RecordStatus>;
  AND?: Maybe<RecordWhereInput[] | RecordWhereInput>;
  OR?: Maybe<RecordWhereInput[] | RecordWhereInput>;
  NOT?: Maybe<RecordWhereInput[] | RecordWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  maxUnlockedLevel?: Maybe<LevelWhereInput>;
  records_every?: Maybe<RecordWhereInput>;
  records_some?: Maybe<RecordWhereInput>;
  records_none?: Maybe<RecordWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface LevelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<Int>;
  code_not?: Maybe<Int>;
  code_in?: Maybe<Int[] | Int>;
  code_not_in?: Maybe<Int[] | Int>;
  code_lt?: Maybe<Int>;
  code_lte?: Maybe<Int>;
  code_gt?: Maybe<Int>;
  code_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  idioms_every?: Maybe<IdiomWhereInput>;
  idioms_some?: Maybe<IdiomWhereInput>;
  idioms_none?: Maybe<IdiomWhereInput>;
  dynasty?: Maybe<DynastyWhereInput>;
  records_every?: Maybe<RecordWhereInput>;
  records_some?: Maybe<RecordWhereInput>;
  records_none?: Maybe<RecordWhereInput>;
  AND?: Maybe<LevelWhereInput[] | LevelWhereInput>;
  OR?: Maybe<LevelWhereInput[] | LevelWhereInput>;
  NOT?: Maybe<LevelWhereInput[] | LevelWhereInput>;
}

export type RecordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface DynastyCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  dynastyName: String;
  idioms?: Maybe<IdiomCreateManyWithoutDynastyInput>;
}

export interface IdiomCreateManyWithoutDynastyInput {
  create?: Maybe<
    IdiomCreateWithoutDynastyInput[] | IdiomCreateWithoutDynastyInput
  >;
  connect?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
}

export interface IdiomCreateWithoutDynastyInput {
  id?: Maybe<ID_Input>;
  idiom: String;
  description: String;
}

export interface DynastyUpdateInput {
  code?: Maybe<String>;
  dynastyName?: Maybe<String>;
  idioms?: Maybe<IdiomUpdateManyWithoutDynastyInput>;
}

export interface IdiomUpdateManyWithoutDynastyInput {
  create?: Maybe<
    IdiomCreateWithoutDynastyInput[] | IdiomCreateWithoutDynastyInput
  >;
  delete?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  connect?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  set?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  disconnect?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  update?: Maybe<
    | IdiomUpdateWithWhereUniqueWithoutDynastyInput[]
    | IdiomUpdateWithWhereUniqueWithoutDynastyInput
  >;
  upsert?: Maybe<
    | IdiomUpsertWithWhereUniqueWithoutDynastyInput[]
    | IdiomUpsertWithWhereUniqueWithoutDynastyInput
  >;
  deleteMany?: Maybe<IdiomScalarWhereInput[] | IdiomScalarWhereInput>;
  updateMany?: Maybe<
    IdiomUpdateManyWithWhereNestedInput[] | IdiomUpdateManyWithWhereNestedInput
  >;
}

export interface IdiomUpdateWithWhereUniqueWithoutDynastyInput {
  where: IdiomWhereUniqueInput;
  data: IdiomUpdateWithoutDynastyDataInput;
}

export interface IdiomUpdateWithoutDynastyDataInput {
  idiom?: Maybe<String>;
  description?: Maybe<String>;
}

export interface IdiomUpsertWithWhereUniqueWithoutDynastyInput {
  where: IdiomWhereUniqueInput;
  update: IdiomUpdateWithoutDynastyDataInput;
  create: IdiomCreateWithoutDynastyInput;
}

export interface IdiomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  idiom?: Maybe<String>;
  idiom_not?: Maybe<String>;
  idiom_in?: Maybe<String[] | String>;
  idiom_not_in?: Maybe<String[] | String>;
  idiom_lt?: Maybe<String>;
  idiom_lte?: Maybe<String>;
  idiom_gt?: Maybe<String>;
  idiom_gte?: Maybe<String>;
  idiom_contains?: Maybe<String>;
  idiom_not_contains?: Maybe<String>;
  idiom_starts_with?: Maybe<String>;
  idiom_not_starts_with?: Maybe<String>;
  idiom_ends_with?: Maybe<String>;
  idiom_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<IdiomScalarWhereInput[] | IdiomScalarWhereInput>;
  OR?: Maybe<IdiomScalarWhereInput[] | IdiomScalarWhereInput>;
  NOT?: Maybe<IdiomScalarWhereInput[] | IdiomScalarWhereInput>;
}

export interface IdiomUpdateManyWithWhereNestedInput {
  where: IdiomScalarWhereInput;
  data: IdiomUpdateManyDataInput;
}

export interface IdiomUpdateManyDataInput {
  idiom?: Maybe<String>;
  description?: Maybe<String>;
}

export interface DynastyUpdateManyMutationInput {
  code?: Maybe<String>;
  dynastyName?: Maybe<String>;
}

export interface IdiomCreateInput {
  id?: Maybe<ID_Input>;
  idiom: String;
  description: String;
  dynasty: DynastyCreateOneWithoutIdiomsInput;
}

export interface DynastyCreateOneWithoutIdiomsInput {
  create?: Maybe<DynastyCreateWithoutIdiomsInput>;
  connect?: Maybe<DynastyWhereUniqueInput>;
}

export interface DynastyCreateWithoutIdiomsInput {
  id?: Maybe<ID_Input>;
  code: String;
  dynastyName: String;
}

export interface IdiomUpdateInput {
  idiom?: Maybe<String>;
  description?: Maybe<String>;
  dynasty?: Maybe<DynastyUpdateOneRequiredWithoutIdiomsInput>;
}

export interface DynastyUpdateOneRequiredWithoutIdiomsInput {
  create?: Maybe<DynastyCreateWithoutIdiomsInput>;
  update?: Maybe<DynastyUpdateWithoutIdiomsDataInput>;
  upsert?: Maybe<DynastyUpsertWithoutIdiomsInput>;
  connect?: Maybe<DynastyWhereUniqueInput>;
}

export interface DynastyUpdateWithoutIdiomsDataInput {
  code?: Maybe<String>;
  dynastyName?: Maybe<String>;
}

export interface DynastyUpsertWithoutIdiomsInput {
  update: DynastyUpdateWithoutIdiomsDataInput;
  create: DynastyCreateWithoutIdiomsInput;
}

export interface IdiomUpdateManyMutationInput {
  idiom?: Maybe<String>;
  description?: Maybe<String>;
}

export interface LevelCreateInput {
  id?: Maybe<ID_Input>;
  code: Int;
  name: String;
  idioms?: Maybe<IdiomCreateManyInput>;
  dynasty: DynastyCreateOneInput;
  records?: Maybe<RecordCreateManyWithoutLevelInput>;
}

export interface IdiomCreateManyInput {
  create?: Maybe<IdiomCreateInput[] | IdiomCreateInput>;
  connect?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
}

export interface DynastyCreateOneInput {
  create?: Maybe<DynastyCreateInput>;
  connect?: Maybe<DynastyWhereUniqueInput>;
}

export interface RecordCreateManyWithoutLevelInput {
  create?: Maybe<
    RecordCreateWithoutLevelInput[] | RecordCreateWithoutLevelInput
  >;
  connect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
}

export interface RecordCreateWithoutLevelInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRecordsInput;
  status: RecordStatus;
}

export interface UserCreateOneWithoutRecordsInput {
  create?: Maybe<UserCreateWithoutRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRecordsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  maxUnlockedLevel: LevelCreateOneInput;
}

export interface LevelCreateOneInput {
  create?: Maybe<LevelCreateInput>;
  connect?: Maybe<LevelWhereUniqueInput>;
}

export interface LevelUpdateInput {
  code?: Maybe<Int>;
  name?: Maybe<String>;
  idioms?: Maybe<IdiomUpdateManyInput>;
  dynasty?: Maybe<DynastyUpdateOneRequiredInput>;
  records?: Maybe<RecordUpdateManyWithoutLevelInput>;
}

export interface IdiomUpdateManyInput {
  create?: Maybe<IdiomCreateInput[] | IdiomCreateInput>;
  update?: Maybe<
    | IdiomUpdateWithWhereUniqueNestedInput[]
    | IdiomUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | IdiomUpsertWithWhereUniqueNestedInput[]
    | IdiomUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  connect?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  set?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  disconnect?: Maybe<IdiomWhereUniqueInput[] | IdiomWhereUniqueInput>;
  deleteMany?: Maybe<IdiomScalarWhereInput[] | IdiomScalarWhereInput>;
  updateMany?: Maybe<
    IdiomUpdateManyWithWhereNestedInput[] | IdiomUpdateManyWithWhereNestedInput
  >;
}

export interface IdiomUpdateWithWhereUniqueNestedInput {
  where: IdiomWhereUniqueInput;
  data: IdiomUpdateDataInput;
}

export interface IdiomUpdateDataInput {
  idiom?: Maybe<String>;
  description?: Maybe<String>;
  dynasty?: Maybe<DynastyUpdateOneRequiredWithoutIdiomsInput>;
}

export interface IdiomUpsertWithWhereUniqueNestedInput {
  where: IdiomWhereUniqueInput;
  update: IdiomUpdateDataInput;
  create: IdiomCreateInput;
}

export interface DynastyUpdateOneRequiredInput {
  create?: Maybe<DynastyCreateInput>;
  update?: Maybe<DynastyUpdateDataInput>;
  upsert?: Maybe<DynastyUpsertNestedInput>;
  connect?: Maybe<DynastyWhereUniqueInput>;
}

export interface DynastyUpdateDataInput {
  code?: Maybe<String>;
  dynastyName?: Maybe<String>;
  idioms?: Maybe<IdiomUpdateManyWithoutDynastyInput>;
}

export interface DynastyUpsertNestedInput {
  update: DynastyUpdateDataInput;
  create: DynastyCreateInput;
}

export interface RecordUpdateManyWithoutLevelInput {
  create?: Maybe<
    RecordCreateWithoutLevelInput[] | RecordCreateWithoutLevelInput
  >;
  delete?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  connect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  set?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  disconnect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  update?: Maybe<
    | RecordUpdateWithWhereUniqueWithoutLevelInput[]
    | RecordUpdateWithWhereUniqueWithoutLevelInput
  >;
  upsert?: Maybe<
    | RecordUpsertWithWhereUniqueWithoutLevelInput[]
    | RecordUpsertWithWhereUniqueWithoutLevelInput
  >;
  deleteMany?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  updateMany?: Maybe<
    | RecordUpdateManyWithWhereNestedInput[]
    | RecordUpdateManyWithWhereNestedInput
  >;
}

export interface RecordUpdateWithWhereUniqueWithoutLevelInput {
  where: RecordWhereUniqueInput;
  data: RecordUpdateWithoutLevelDataInput;
}

export interface RecordUpdateWithoutLevelDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRecordsInput>;
  status?: Maybe<RecordStatus>;
}

export interface UserUpdateOneRequiredWithoutRecordsInput {
  create?: Maybe<UserCreateWithoutRecordsInput>;
  update?: Maybe<UserUpdateWithoutRecordsDataInput>;
  upsert?: Maybe<UserUpsertWithoutRecordsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRecordsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  maxUnlockedLevel?: Maybe<LevelUpdateOneRequiredInput>;
}

export interface LevelUpdateOneRequiredInput {
  create?: Maybe<LevelCreateInput>;
  update?: Maybe<LevelUpdateDataInput>;
  upsert?: Maybe<LevelUpsertNestedInput>;
  connect?: Maybe<LevelWhereUniqueInput>;
}

export interface LevelUpdateDataInput {
  code?: Maybe<Int>;
  name?: Maybe<String>;
  idioms?: Maybe<IdiomUpdateManyInput>;
  dynasty?: Maybe<DynastyUpdateOneRequiredInput>;
  records?: Maybe<RecordUpdateManyWithoutLevelInput>;
}

export interface LevelUpsertNestedInput {
  update: LevelUpdateDataInput;
  create: LevelCreateInput;
}

export interface UserUpsertWithoutRecordsInput {
  update: UserUpdateWithoutRecordsDataInput;
  create: UserCreateWithoutRecordsInput;
}

export interface RecordUpsertWithWhereUniqueWithoutLevelInput {
  where: RecordWhereUniqueInput;
  update: RecordUpdateWithoutLevelDataInput;
  create: RecordCreateWithoutLevelInput;
}

export interface RecordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<RecordStatus>;
  status_not?: Maybe<RecordStatus>;
  status_in?: Maybe<RecordStatus[] | RecordStatus>;
  status_not_in?: Maybe<RecordStatus[] | RecordStatus>;
  AND?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  OR?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  NOT?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
}

export interface RecordUpdateManyWithWhereNestedInput {
  where: RecordScalarWhereInput;
  data: RecordUpdateManyDataInput;
}

export interface RecordUpdateManyDataInput {
  status?: Maybe<RecordStatus>;
}

export interface LevelUpdateManyMutationInput {
  code?: Maybe<Int>;
  name?: Maybe<String>;
}

export interface RecordCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRecordsInput;
  level: LevelCreateOneWithoutRecordsInput;
  status: RecordStatus;
}

export interface LevelCreateOneWithoutRecordsInput {
  create?: Maybe<LevelCreateWithoutRecordsInput>;
  connect?: Maybe<LevelWhereUniqueInput>;
}

export interface LevelCreateWithoutRecordsInput {
  id?: Maybe<ID_Input>;
  code: Int;
  name: String;
  idioms?: Maybe<IdiomCreateManyInput>;
  dynasty: DynastyCreateOneInput;
}

export interface RecordUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRecordsInput>;
  level?: Maybe<LevelUpdateOneRequiredWithoutRecordsInput>;
  status?: Maybe<RecordStatus>;
}

export interface LevelUpdateOneRequiredWithoutRecordsInput {
  create?: Maybe<LevelCreateWithoutRecordsInput>;
  update?: Maybe<LevelUpdateWithoutRecordsDataInput>;
  upsert?: Maybe<LevelUpsertWithoutRecordsInput>;
  connect?: Maybe<LevelWhereUniqueInput>;
}

export interface LevelUpdateWithoutRecordsDataInput {
  code?: Maybe<Int>;
  name?: Maybe<String>;
  idioms?: Maybe<IdiomUpdateManyInput>;
  dynasty?: Maybe<DynastyUpdateOneRequiredInput>;
}

export interface LevelUpsertWithoutRecordsInput {
  update: LevelUpdateWithoutRecordsDataInput;
  create: LevelCreateWithoutRecordsInput;
}

export interface RecordUpdateManyMutationInput {
  status?: Maybe<RecordStatus>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  maxUnlockedLevel: LevelCreateOneInput;
  records?: Maybe<RecordCreateManyWithoutUserInput>;
}

export interface RecordCreateManyWithoutUserInput {
  create?: Maybe<RecordCreateWithoutUserInput[] | RecordCreateWithoutUserInput>;
  connect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
}

export interface RecordCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  level: LevelCreateOneWithoutRecordsInput;
  status: RecordStatus;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  maxUnlockedLevel?: Maybe<LevelUpdateOneRequiredInput>;
  records?: Maybe<RecordUpdateManyWithoutUserInput>;
}

export interface RecordUpdateManyWithoutUserInput {
  create?: Maybe<RecordCreateWithoutUserInput[] | RecordCreateWithoutUserInput>;
  delete?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  connect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  set?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  disconnect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  update?: Maybe<
    | RecordUpdateWithWhereUniqueWithoutUserInput[]
    | RecordUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RecordUpsertWithWhereUniqueWithoutUserInput[]
    | RecordUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  updateMany?: Maybe<
    | RecordUpdateManyWithWhereNestedInput[]
    | RecordUpdateManyWithWhereNestedInput
  >;
}

export interface RecordUpdateWithWhereUniqueWithoutUserInput {
  where: RecordWhereUniqueInput;
  data: RecordUpdateWithoutUserDataInput;
}

export interface RecordUpdateWithoutUserDataInput {
  level?: Maybe<LevelUpdateOneRequiredWithoutRecordsInput>;
  status?: Maybe<RecordStatus>;
}

export interface RecordUpsertWithWhereUniqueWithoutUserInput {
  where: RecordWhereUniqueInput;
  update: RecordUpdateWithoutUserDataInput;
  create: RecordCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface DynastySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DynastyWhereInput>;
  AND?: Maybe<DynastySubscriptionWhereInput[] | DynastySubscriptionWhereInput>;
  OR?: Maybe<DynastySubscriptionWhereInput[] | DynastySubscriptionWhereInput>;
  NOT?: Maybe<DynastySubscriptionWhereInput[] | DynastySubscriptionWhereInput>;
}

export interface IdiomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IdiomWhereInput>;
  AND?: Maybe<IdiomSubscriptionWhereInput[] | IdiomSubscriptionWhereInput>;
  OR?: Maybe<IdiomSubscriptionWhereInput[] | IdiomSubscriptionWhereInput>;
  NOT?: Maybe<IdiomSubscriptionWhereInput[] | IdiomSubscriptionWhereInput>;
}

export interface LevelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LevelWhereInput>;
  AND?: Maybe<LevelSubscriptionWhereInput[] | LevelSubscriptionWhereInput>;
  OR?: Maybe<LevelSubscriptionWhereInput[] | LevelSubscriptionWhereInput>;
  NOT?: Maybe<LevelSubscriptionWhereInput[] | LevelSubscriptionWhereInput>;
}

export interface RecordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecordWhereInput>;
  AND?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
  OR?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
  NOT?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Dynasty {
  id: ID_Output;
  code: String;
  dynastyName: String;
}

export interface DynastyPromise extends Promise<Dynasty>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  dynastyName: () => Promise<String>;
  idioms: <T = FragmentableArray<Idiom>>(args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DynastySubscription
  extends Promise<AsyncIterator<Dynasty>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  dynastyName: () => Promise<AsyncIterator<String>>;
  idioms: <T = Promise<AsyncIterator<IdiomSubscription>>>(args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DynastyNullablePromise
  extends Promise<Dynasty | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  dynastyName: () => Promise<String>;
  idioms: <T = FragmentableArray<Idiom>>(args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Idiom {
  id: ID_Output;
  idiom: String;
  description: String;
}

export interface IdiomPromise extends Promise<Idiom>, Fragmentable {
  id: () => Promise<ID_Output>;
  idiom: () => Promise<String>;
  description: () => Promise<String>;
  dynasty: <T = DynastyPromise>() => T;
}

export interface IdiomSubscription
  extends Promise<AsyncIterator<Idiom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idiom: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dynasty: <T = DynastySubscription>() => T;
}

export interface IdiomNullablePromise
  extends Promise<Idiom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idiom: () => Promise<String>;
  description: () => Promise<String>;
  dynasty: <T = DynastyPromise>() => T;
}

export interface DynastyConnection {
  pageInfo: PageInfo;
  edges: DynastyEdge[];
}

export interface DynastyConnectionPromise
  extends Promise<DynastyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DynastyEdge>>() => T;
  aggregate: <T = AggregateDynastyPromise>() => T;
}

export interface DynastyConnectionSubscription
  extends Promise<AsyncIterator<DynastyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DynastyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDynastySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DynastyEdge {
  node: Dynasty;
  cursor: String;
}

export interface DynastyEdgePromise extends Promise<DynastyEdge>, Fragmentable {
  node: <T = DynastyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DynastyEdgeSubscription
  extends Promise<AsyncIterator<DynastyEdge>>,
    Fragmentable {
  node: <T = DynastySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDynasty {
  count: Int;
}

export interface AggregateDynastyPromise
  extends Promise<AggregateDynasty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDynastySubscription
  extends Promise<AsyncIterator<AggregateDynasty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IdiomConnection {
  pageInfo: PageInfo;
  edges: IdiomEdge[];
}

export interface IdiomConnectionPromise
  extends Promise<IdiomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IdiomEdge>>() => T;
  aggregate: <T = AggregateIdiomPromise>() => T;
}

export interface IdiomConnectionSubscription
  extends Promise<AsyncIterator<IdiomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IdiomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIdiomSubscription>() => T;
}

export interface IdiomEdge {
  node: Idiom;
  cursor: String;
}

export interface IdiomEdgePromise extends Promise<IdiomEdge>, Fragmentable {
  node: <T = IdiomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IdiomEdgeSubscription
  extends Promise<AsyncIterator<IdiomEdge>>,
    Fragmentable {
  node: <T = IdiomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIdiom {
  count: Int;
}

export interface AggregateIdiomPromise
  extends Promise<AggregateIdiom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIdiomSubscription
  extends Promise<AsyncIterator<AggregateIdiom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Level {
  id: ID_Output;
  code: Int;
  name: String;
}

export interface LevelPromise extends Promise<Level>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  name: () => Promise<String>;
  idioms: <T = FragmentableArray<Idiom>>(args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dynasty: <T = DynastyPromise>() => T;
  records: <T = FragmentableArray<Record>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LevelSubscription
  extends Promise<AsyncIterator<Level>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  idioms: <T = Promise<AsyncIterator<IdiomSubscription>>>(args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dynasty: <T = DynastySubscription>() => T;
  records: <T = Promise<AsyncIterator<RecordSubscription>>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LevelNullablePromise
  extends Promise<Level | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  name: () => Promise<String>;
  idioms: <T = FragmentableArray<Idiom>>(args?: {
    where?: IdiomWhereInput;
    orderBy?: IdiomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dynasty: <T = DynastyPromise>() => T;
  records: <T = FragmentableArray<Record>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Record {
  id: ID_Output;
  status: RecordStatus;
}

export interface RecordPromise extends Promise<Record>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  level: <T = LevelPromise>() => T;
  status: () => Promise<RecordStatus>;
}

export interface RecordSubscription
  extends Promise<AsyncIterator<Record>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  level: <T = LevelSubscription>() => T;
  status: () => Promise<AsyncIterator<RecordStatus>>;
}

export interface RecordNullablePromise
  extends Promise<Record | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  level: <T = LevelPromise>() => T;
  status: () => Promise<RecordStatus>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  maxUnlockedLevel: <T = LevelPromise>() => T;
  records: <T = FragmentableArray<Record>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  maxUnlockedLevel: <T = LevelSubscription>() => T;
  records: <T = Promise<AsyncIterator<RecordSubscription>>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  maxUnlockedLevel: <T = LevelPromise>() => T;
  records: <T = FragmentableArray<Record>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LevelConnection {
  pageInfo: PageInfo;
  edges: LevelEdge[];
}

export interface LevelConnectionPromise
  extends Promise<LevelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LevelEdge>>() => T;
  aggregate: <T = AggregateLevelPromise>() => T;
}

export interface LevelConnectionSubscription
  extends Promise<AsyncIterator<LevelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LevelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLevelSubscription>() => T;
}

export interface LevelEdge {
  node: Level;
  cursor: String;
}

export interface LevelEdgePromise extends Promise<LevelEdge>, Fragmentable {
  node: <T = LevelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LevelEdgeSubscription
  extends Promise<AsyncIterator<LevelEdge>>,
    Fragmentable {
  node: <T = LevelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLevel {
  count: Int;
}

export interface AggregateLevelPromise
  extends Promise<AggregateLevel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLevelSubscription
  extends Promise<AsyncIterator<AggregateLevel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RecordConnection {
  pageInfo: PageInfo;
  edges: RecordEdge[];
}

export interface RecordConnectionPromise
  extends Promise<RecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecordEdge>>() => T;
  aggregate: <T = AggregateRecordPromise>() => T;
}

export interface RecordConnectionSubscription
  extends Promise<AsyncIterator<RecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecordSubscription>() => T;
}

export interface RecordEdge {
  node: Record;
  cursor: String;
}

export interface RecordEdgePromise extends Promise<RecordEdge>, Fragmentable {
  node: <T = RecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecordEdgeSubscription
  extends Promise<AsyncIterator<RecordEdge>>,
    Fragmentable {
  node: <T = RecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecord {
  count: Int;
}

export interface AggregateRecordPromise
  extends Promise<AggregateRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecordSubscription
  extends Promise<AsyncIterator<AggregateRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DynastySubscriptionPayload {
  mutation: MutationType;
  node: Dynasty;
  updatedFields: String[];
  previousValues: DynastyPreviousValues;
}

export interface DynastySubscriptionPayloadPromise
  extends Promise<DynastySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DynastyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DynastyPreviousValuesPromise>() => T;
}

export interface DynastySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DynastySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DynastySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DynastyPreviousValuesSubscription>() => T;
}

export interface DynastyPreviousValues {
  id: ID_Output;
  code: String;
  dynastyName: String;
}

export interface DynastyPreviousValuesPromise
  extends Promise<DynastyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  dynastyName: () => Promise<String>;
}

export interface DynastyPreviousValuesSubscription
  extends Promise<AsyncIterator<DynastyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  dynastyName: () => Promise<AsyncIterator<String>>;
}

export interface IdiomSubscriptionPayload {
  mutation: MutationType;
  node: Idiom;
  updatedFields: String[];
  previousValues: IdiomPreviousValues;
}

export interface IdiomSubscriptionPayloadPromise
  extends Promise<IdiomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IdiomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IdiomPreviousValuesPromise>() => T;
}

export interface IdiomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IdiomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IdiomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IdiomPreviousValuesSubscription>() => T;
}

export interface IdiomPreviousValues {
  id: ID_Output;
  idiom: String;
  description: String;
}

export interface IdiomPreviousValuesPromise
  extends Promise<IdiomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idiom: () => Promise<String>;
  description: () => Promise<String>;
}

export interface IdiomPreviousValuesSubscription
  extends Promise<AsyncIterator<IdiomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idiom: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface LevelSubscriptionPayload {
  mutation: MutationType;
  node: Level;
  updatedFields: String[];
  previousValues: LevelPreviousValues;
}

export interface LevelSubscriptionPayloadPromise
  extends Promise<LevelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LevelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LevelPreviousValuesPromise>() => T;
}

export interface LevelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LevelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LevelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LevelPreviousValuesSubscription>() => T;
}

export interface LevelPreviousValues {
  id: ID_Output;
  code: Int;
  name: String;
}

export interface LevelPreviousValuesPromise
  extends Promise<LevelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface LevelPreviousValuesSubscription
  extends Promise<AsyncIterator<LevelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RecordSubscriptionPayload {
  mutation: MutationType;
  node: Record;
  updatedFields: String[];
  previousValues: RecordPreviousValues;
}

export interface RecordSubscriptionPayloadPromise
  extends Promise<RecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecordPreviousValuesPromise>() => T;
}

export interface RecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecordPreviousValuesSubscription>() => T;
}

export interface RecordPreviousValues {
  id: ID_Output;
  status: RecordStatus;
}

export interface RecordPreviousValuesPromise
  extends Promise<RecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<RecordStatus>;
}

export interface RecordPreviousValuesSubscription
  extends Promise<AsyncIterator<RecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<RecordStatus>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Idiom",
    embedded: false
  },
  {
    name: "Dynasty",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Level",
    embedded: false
  },
  {
    name: "Record",
    embedded: false
  },
  {
    name: "RecordStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
